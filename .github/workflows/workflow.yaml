name: CI/CD with Docker

# event trigger
# main이나 develop 브랜치에 push가 되었을 때 실행 / main에 pr되면 실행
on:
  pull_request:
    branches:
      - main

  push:
    branches:
      - develop
      - main

  workflow_dispatch:

jobs:
  ci:
    name: Run CI
    runs-on: ubuntu-latest

    steps:
      # 현재 워크플로우를 실행하는 저장소의 소스 코드를 가져오는 작업
      - name: checkout
        uses: actions/checkout@v4

      # JDK setting - github actions에서 사용할 JDK 설정
      - name: setting JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # gradle caching - 빌드 시간 향상
      - name: Gradle cashing
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # 필요한 라이브러리를 다운로드
      - name: dependency
        run: ./gradlew dependencies

      # gradle build, demon 사용 x
      - name: build
        run: ./gradlew build --no-daemon

  cd:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: ci

    steps:
      - name: code checkout
        uses: actions/checkout@v4

      - name: Docker Log in
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGENAME }}:latest .

      - name: push Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGENAME }}:latest

      - name: ssh to oracle and deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker rmi -f ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGENAME }}:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGENAME }}:latest
            cd /home/ubuntu/daboa/docker/app
            docker compose up -d
            docker image prune -f
